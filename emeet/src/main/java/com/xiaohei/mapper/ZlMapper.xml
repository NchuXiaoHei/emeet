<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaohei.mapper.ZlMapper">
  <resultMap id="BaseResultMap" type="com.xiaohei.model.Zl">
    <id column="zl_id" jdbcType="INTEGER" property="zlId" />
    <id column="ID" jdbcType="DECIMAL" property="id" />
    <result column="note" jdbcType="VARCHAR" property="note" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.xiaohei.model.Zl">
    <result column="file_path" jdbcType="LONGVARCHAR" property="filePath" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    zl_id, ID, note
  </sql>
  <sql id="Blob_Column_List">
    file_path
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.xiaohei.model.ZlExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from zl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.xiaohei.model.ZlExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from zl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from zl
    where zl_id = #{zlId,jdbcType=INTEGER}
      and ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from zl
    where zl_id = #{zlId,jdbcType=INTEGER}
      and ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiaohei.model.ZlExample">
    delete from zl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiaohei.model.Zl">
    insert into zl (zl_id, ID, note, 
      file_path)
    values (#{zlId,jdbcType=INTEGER}, #{id,jdbcType=DECIMAL}, #{note,jdbcType=VARCHAR}, 
      #{filePath,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xiaohei.model.Zl">
    insert into zl
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="zlId != null">
        zl_id,
      </if>
      <if test="id != null">
        ID,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="filePath != null">
        file_path,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="zlId != null">
        #{zlId,jdbcType=INTEGER},
      </if>
      <if test="id != null">
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        #{filePath,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiaohei.model.ZlExample" resultType="java.lang.Long">
    select count(*) from zl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zl
    <set>
      <if test="record.zlId != null">
        zl_id = #{record.zlId,jdbcType=INTEGER},
      </if>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.note != null">
        note = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.filePath != null">
        file_path = #{record.filePath,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update zl
    set zl_id = #{record.zlId,jdbcType=INTEGER},
      ID = #{record.id,jdbcType=DECIMAL},
      note = #{record.note,jdbcType=VARCHAR},
      file_path = #{record.filePath,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zl
    set zl_id = #{record.zlId,jdbcType=INTEGER},
      ID = #{record.id,jdbcType=DECIMAL},
      note = #{record.note,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiaohei.model.Zl">
    update zl
    <set>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        file_path = #{filePath,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where zl_id = #{zlId,jdbcType=INTEGER}
      and ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xiaohei.model.Zl">
    update zl
    set note = #{note,jdbcType=VARCHAR},
      file_path = #{filePath,jdbcType=LONGVARCHAR}
    where zl_id = #{zlId,jdbcType=INTEGER}
      and ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiaohei.model.Zl">
    update zl
    set note = #{note,jdbcType=VARCHAR}
    where zl_id = #{zlId,jdbcType=INTEGER}
      and ID = #{id,jdbcType=DECIMAL}
  </update>
</mapper>